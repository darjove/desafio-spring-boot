/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package cl.nuevospa.adapter.api;

import cl.nuevospa.domain.api.Task;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-03-15T17:58:12.455469200-03:00[America/Santiago]")
@Validated
@Tag(name = "task", description = "the task API")
@RequestMapping("${openapi.task.base-path:/api/v1}")
public interface TaskApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /task/create : Create Task
     *
     * @param task  (required)
     * @return Created (status code 201)
     *         or Invalid request (status code 400)
     *         or Unauthorized request (status code 401)
     *         or Internal Server Error. Can be explained in error body response (status code 500)
     */
    @Operation(
        operationId = "createTask",
        summary = "Create Task",
        tags = { "task" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Task.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request"),
            @ApiResponse(responseCode = "401", description = "Unauthorized request"),
            @ApiResponse(responseCode = "500", description = "Internal Server Error. Can be explained in error body response")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/task/create",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Task> createTask(
        @Parameter(name = "Task", description = "", required = true) @Valid @RequestBody Task task
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"description\" : \"Se necesita un ms en java 17 para administrar tareas para NuevoSPA\", \"title\" : \"Crear microservicio para tareas\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /task/delete/{id}
     * Delete a task if exist
     *
     * @param id ID of task to delete (required)
     * @return Task deleted (status code 200)
     *         or Bad Request (for delete task) (status code 400)
     *         or Unauthorized request (status code 401)
     *         or Internal Server Error. Can be explained in error body response (status code 500)
     */
    @Operation(
        operationId = "deleteTask",
        responses = {
            @ApiResponse(responseCode = "200", description = "Task deleted"),
            @ApiResponse(responseCode = "400", description = "Bad Request (for delete task)"),
            @ApiResponse(responseCode = "401", description = "Unauthorized request"),
            @ApiResponse(responseCode = "500", description = "Internal Server Error. Can be explained in error body response")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/task/delete/{id}"
    )
    default ResponseEntity<Void> deleteTask(
        @Parameter(name = "id", description = "ID of task to delete", required = true) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /task/get/{id} : Return task
     * Return a task if exist
     *
     * @param id ID of task to get (required)
     * @return json with task info (status code 200)
     *         or Bad Request (for get task) (status code 400)
     *         or Unauthorized request (status code 401)
     *         or Internal Server Error. Can be explained in error body response (status code 500)
     */
    @Operation(
        operationId = "getTask",
        summary = "Return task",
        responses = {
            @ApiResponse(responseCode = "200", description = "json with task info", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Task.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request (for get task)"),
            @ApiResponse(responseCode = "401", description = "Unauthorized request"),
            @ApiResponse(responseCode = "500", description = "Internal Server Error. Can be explained in error body response")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/task/get/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Task> getTask(
        @Parameter(name = "id", description = "ID of task to get", required = true) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"description\" : \"Se necesita un ms en java 17 para administrar tareas para NuevoSPA\", \"title\" : \"Crear microservicio para tareas\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /task/get-all : Return all tasks
     * Return all tasks that exists
     *
     * @return json with tasks info (status code 200)
     *         or Bad Request (for get tasks) (status code 400)
     *         or Unauthorized request (status code 401)
     *         or Internal Server Error. Can be explained in error body response (status code 500)
     */
    @Operation(
        operationId = "getTasks",
        summary = "Return all tasks",
        responses = {
            @ApiResponse(responseCode = "200", description = "json with tasks info", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Task.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request (for get tasks)"),
            @ApiResponse(responseCode = "401", description = "Unauthorized request"),
            @ApiResponse(responseCode = "500", description = "Internal Server Error. Can be explained in error body response")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/task/get-all",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Task>> getTasks(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"description\" : \"Se necesita un ms en java 17 para administrar tareas para NuevoSPA\", \"title\" : \"Crear microservicio para tareas\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /task/update/{id} : Update task
     * Update a task if exist
     *
     * @param id ID of task to update (required)
     * @param task  (required)
     * @return Task updated (status code 200)
     *         or Bad Request (for update task) (status code 400)
     *         or Unauthorized request (status code 401)
     *         or Internal Server Error. Can be explained in error body response (status code 500)
     */
    @Operation(
        operationId = "updateTask",
        summary = "Update task",
        responses = {
            @ApiResponse(responseCode = "200", description = "Task updated", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Task.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request (for update task)"),
            @ApiResponse(responseCode = "401", description = "Unauthorized request"),
            @ApiResponse(responseCode = "500", description = "Internal Server Error. Can be explained in error body response")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/task/update/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Task> updateTask(
        @Parameter(name = "id", description = "ID of task to update", required = true) @PathVariable("id") Integer id,
        @Parameter(name = "Task", description = "", required = true) @Valid @RequestBody Task task
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"description\" : \"Se necesita un ms en java 17 para administrar tareas para NuevoSPA\", \"title\" : \"Crear microservicio para tareas\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
