/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.redhat.todo.api;

import com.redhat.todo.model.Todo;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-03-14T22:48:24.941313900-03:00[America/Santiago]")

@Validated
@Api(value = "todos", description = "the todos API")
public interface TodosApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /todos : Create a todo
     * Creates a new instance of a &#x60;todo&#x60;.
     *
     * @param todo A new &#x60;todo&#x60; to be created. (required)
     * @param completed Show completed/uncompleted todo items (optional)
     * @return Successful response. (status code 201)
     */
    @ApiOperation(value = "Create a todo", nickname = "createTodo", notes = "Creates a new instance of a `todo`.", tags={ "todo", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Successful response.") })
    @RequestMapping(value = "/todos",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> createTodo(@ApiParam(value = "A new `todo` to be created." ,required=true )  @Valid @RequestBody Todo todo,@ApiParam(value = "Show completed/uncompleted todo items") @Valid @RequestParam(value = "completed", required = false) Boolean completed) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /todos/{todoId} : Delete a todo
     * Deletes an existing &#x60;todo&#x60;.
     *
     * @param todoId A unique identifier for a &#x60;todo&#x60;. (required)
     * @return Successful response. (status code 204)
     *         or Todo item not found (status code 404)
     */
    @ApiOperation(value = "Delete a todo", nickname = "deleteTodo", notes = "Deletes an existing `todo`.", tags={ "todo", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Successful response."),
        @ApiResponse(code = 404, message = "Todo item not found") })
    @RequestMapping(value = "/todos/{todoId}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteTodo(@ApiParam(value = "A unique identifier for a `todo`.",required=true) @PathVariable("todoId") String todoId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /todos/{todoId} : Get a todo
     * Gets the details of a single instance of a &#x60;todo&#x60;.
     *
     * @param todoId A unique identifier for a &#x60;todo&#x60;. (required)
     * @return Successful response - returns a single &#x60;todo&#x60;. (status code 200)
     *         or Todo item not found (status code 404)
     */
    @ApiOperation(value = "Get a todo", nickname = "getTodo", notes = "Gets the details of a single instance of a `todo`.", response = Todo.class, tags={ "todo", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response - returns a single `todo`.", response = Todo.class),
        @ApiResponse(code = 404, message = "Todo item not found") })
    @RequestMapping(value = "/todos/{todoId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Todo> getTodo(@ApiParam(value = "A unique identifier for a `todo`.",required=true) @PathVariable("todoId") String todoId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"Todo item\", \"description\" : \"Description of item\", \"date\" : \"2018-05-06T18:25:43.511Z\", \"completed\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /todos : List All todos
     * Gets a list of all &#x60;todo&#x60; entities.
     *
     * @param completed Show completed/uncompleted todo items (optional)
     * @return Successful response - returns an array of &#x60;todo&#x60; entities. (status code 200)
     */
    @ApiOperation(value = "List All todos", nickname = "getTodos", notes = "Gets a list of all `todo` entities.", response = Todo.class, responseContainer = "List", tags={ "todo", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response - returns an array of `todo` entities.", response = Todo.class, responseContainer = "List") })
    @RequestMapping(value = "/todos",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Todo>> getTodos(@ApiParam(value = "Show completed/uncompleted todo items") @Valid @RequestParam(value = "completed", required = false) Boolean completed) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"Todo item\", \"description\" : \"Description of item\", \"date\" : \"2018-05-06T18:25:43.511Z\", \"completed\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /todos/{todoId} : Update a todo
     * Updates an existing &#x60;todo&#x60;.
     *
     * @param todoId A unique identifier for a &#x60;todo&#x60;. (required)
     * @param todo Updated &#x60;todo&#x60; information. (required)
     * @return Successful response. (status code 202)
     *         or Todo item not found (status code 404)
     */
    @ApiOperation(value = "Update a todo", nickname = "updateTodo", notes = "Updates an existing `todo`.", tags={ "todo", })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "Successful response."),
        @ApiResponse(code = 404, message = "Todo item not found") })
    @RequestMapping(value = "/todos/{todoId}",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> updateTodo(@ApiParam(value = "A unique identifier for a `todo`.",required=true) @PathVariable("todoId") String todoId,@ApiParam(value = "Updated `todo` information." ,required=true )  @Valid @RequestBody Todo todo) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
